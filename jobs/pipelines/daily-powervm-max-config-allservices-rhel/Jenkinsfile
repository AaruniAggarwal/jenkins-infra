@Library('pcloud-jenkins-library') _
//Define global variables
def AUTH_URL
def ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def VA
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            label 'daily-x86_64'
        }
    }
        environment {
            //users and credentials. All must be defined in Jenkins Credentials
            GITHUB_USER = credentials('GITHUB_USER')
            TF_VAR_user_name = credentials('GITHUB_USER')
            DOCKER_USER = credentials('GITHUB_USER')
            ARTIFACTORY_USER = credentials('GITHUB_USER')
            TF_VAR_repo_user = credentials('GITHUB_USER')
            TF_VAR_password = credentials('TF_VAR_password')
            OS_USERNAME = credentials('GITHUB_USER')
            OS_PASSWORD = credentials('TF_VAR_password')
            OS_INSECURE = true
            GITHUB_TOKEN = credentials('GITHUB_TOKEN')
            ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')

            //Env constants
            FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
            TERRAFORM_VER = "0.11.13"
            TARGET = "deploy-power-powervc"
            TEST_SUITE = "ppc64le"
            OS_IDENTITY_API_VERSION='3'
            OS_TENANT_NAME="ibm-default"
            OS_USER_DOMAIN_NAME="default"

            VIR_CHOSE = "PowerVM"
            HARDWARE_CHOSE="P8"
            DISTRO_CHOSE = "RHEL7.6"
            DEPLOY_REPO = "daily"
            ICP_ADDITIONAL_CONFIG = '\"management_services = {    vulnerability-advisor      = \\"enabled\\"    istio                      = \\"enabled\\"    storage-glusterfs          = \\"disabled\\"    platform-security-netpols    = \\"enabled\\"    node-problem-detector-draino = \\"enabled\\"    multicluster-hub  	         =  \\"disabled\\"    multicluster-endpoint        = \\"enabled\\"     kmsplugin			 = \\"disabled\\"   }multicluster-endpoint = {  search = {    resources = {      limits = {        memory = \\"256Mi\\"      }    }  }}auth-idp = {  platform_auth = {    resources = {      limits = {        memory = \\"2500Mi\\"      }    }  }  identity_manager = {    resources = {      limits = {        memory = \\"2500Mi\\"      }    }  }  identity_provider = {    resources = {      limits = {        memory = \\"2500Mi\\"      }    }  }  icp_audit = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}cert-manager = {  resources = {    limits = {      memory = \\"512Mi\\"    }  }}auth-pap = {  auth_pap = {    resources = {      limits = {        memory = \\"2500Mi\\"      }    }  }  icp_audit = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}mongodb = {  metrics = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}logging = {  logstash = {    memoryLimit = \\"3000Mi\\"    probe = {      resources = {        limits = {          memory = \\"512Mi\\"        }      }    }  }  elasticsearch = {    client = {      memoryLimit = \\"3000Mi\\"    }    master = {      memoryLimit = \\"3000Mi\\"    }    data = {      memoryLimit = \\"4500Mi\\"    }    pkiInitImage = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }    pluginInitImage = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }    curator = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }    routerImage = {      resources = {        limits = {          memory = \\"512Mi\\"        }      }    }  }  kibana = {      memoryLimit = \\"3000Mi\\"    init = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }    routerImage = {      resources = {        limits = {          memory = \\"512Mi\\"        }      }    }  }  search = {    collector = {      resources = {        limits = {          memory = \\"512Mi\\"        }      }    }  }   filebeat = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}monitoring = {  prometheus = {    resources = {      limits = {        memory = \\"3000Mi\\"      }    }  }  router = {    resources = {      limits = {        memory = \\"512Mi\\"        }      }    }    alertmanager = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }    grafana = {    resources = {      limits = {        memory = \\"2000Mi\\"        }      }    }  dashboardController = {    resources = {      limits = {        memory = \\"512Mi\\"        }      }    }}helm-api = {  helmapi = {    resources = {      limits = {        memory = \\"1000Mi\\"        }      }    }  rudder = {    resources = {      limits = {        memory = \\"1000Mi\\"        }      }    }  auditService = {    resources = {      limits = {        memory = \\"1000Mi\\"        }      }    }}helm-repo = {  helmrepo = {    resources = {      limits = {        memory = \\"1500Mi\\"        }      }    }  auditService = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}mgmt-repo = {  mgmtrepo = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }  auditService = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}platform-api = {  platformApi = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }  platformDeploy = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}platform-ui = {  resources = {    limits = {      memory = \\"1000Mi\\"    }  }}image-security-enforcement = {  resources = {    limits = {      memory = \\"1000Mi\\"    }  }}catalog-ui = {  catalogui = {    resources = {      limits = {        memory = \\"1000Mi\\"      }    }  }}service-catalog = {  service_catalog = {    apiserver = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }    controllerManager = {      resources = {        limits = {          memory = \\"1000Mi\\"        }      }    }  }}nginx-ingress = {  ingress = {    config = {      worker-processes = \\"5\\"    }  }}calico = {  calico_config = {    calico_pod_mtu = \\"1500\\"  }}vulnerability-advisor = {  auditService = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  complianceAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  complianceIndexer = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  configParser = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  cosIndexer = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  liveCrawler = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  maMCMcontroller = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  mafileAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  mafileWhitelist = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  minioCleaner = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  passwordAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  processmaAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  processmaAnnotatorInit = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  processmaCrawler = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  processmaWhitelist = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  registryCrawler = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  rootkitAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  rootkitIndexer = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  sasApiserver = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  secconfigAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  secconfigIndexer = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  statsd = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  usncrawler = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  vulnerabilityAnnotator = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  vulnerabilityIndexer = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }  watcherReloader = {    resources = {      limits = {        memory = \\"1024Mi\\"      }    }  }} multicluster-endpoint = {   global = {     clusterName = \\"mcm_cluster\\"    clusterNamespace = \\"mcm_namespace\\"    deployedOnHub =  \\"false\\"  }  clusterLabels = {     cloud =  \\"IBM\\"    vendor =  \\"ICP\\"    environment =  \\"Dev\\"    region =   \\"US\\"    datacenter =   \\"toronto\\"    owner =   \\"marketing\\"  }  operator = {     bootstrapConfig = {       hub0 = {         name = \\"hub0\\"        secret = \\"kube-system/klusterlet-bootstrap\\"      }      hub1 = {         name = \\"null\\"        secret = \\"null\\"      }    }  }  klusterlet = {     enabled = \\"true\\"    serviceType =  \\"ClusterIP\\"    ingress = {       enabled = \\"true\\"      host = \\"null\\"      port = \\"null\\"    }    route = {       enabled = \\"false\\"      host = \\"null\\"      port = \\"null\\"    }  }  tillerIntegration = {     enabled = \\"true\\"  }  deployable = {     enabled = \\"false\\"  }  prometheusIntegration = {     enabled = \\"true\\"  }  policy = {     enabled = \\"true\\"    cemIntegration = \\"false\\"  }  search = {     enabled = \\"true\\"  }  topology = {     enabled = \\"true\\"  }  serviceRegistry = {     enabled = \\"false\\"    dnsSuffix =  \\"mcm.svc\\"    plugins = \\"kube-service\\"  }}\"'
            SERVER_CONFIG = "Max"
            boolean SYSTEM_TUNING = false
            boolean DEPLOY_VA = true
            boolean DEPLOY_MANAGER = true
            boolean DEPLOY_WORKER = true
            TIMEOUT = "0"
            TERMPLATE_FILE = ".deploy-power-powervc.tfvars.template"

            //Removing carriage return from  ICP additional Configuration
            CONFIG=sh (returnStdout: true, script: "echo ${ICP_ADDITIONAL_CONFIG}|tr '\n' ' '")
            CONF = "'${CONFIG}'"
	 }

    stages {
        //Checkout the canary-deployment git repo
        stage('Clone Canary Deployment') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'canary-deployments'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:ICP-DevOps/canary-deployments.git', credentialsId: 'ibm-github']]])
            }
        }
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {

                        echo 'Setting-up terraform template file for Max Config PowerVM!'
                        AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                        if ("${ZONE}" == null)
                        {
                            echo "Requested zone could not find"
                            error('Requested zone could not find')
                        }
                        IMAGE=getTheImage(AUTH_URL, env.DISTRO_CHOSE )
                        if ("${IMAGE}" == "")
                        {
                            echo "Requested image could not find in ${AUTH_URL}"
                            error('Requested image could not find')

                        }
                        //16*8 > 128vcpus, 64G
                        MASTER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                        if ("${MASTER}" == null)
                        {
                            echo "Requested template could not find"
                            error('Requested zone could not find')
                        }
                        MANAGER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                        WORKER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                        VA=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                        // Updating tempate file with env variables
                        updateTemplate(AUTH_URL, ZONE, IMAGE, MASTER, WORKER, MANAGER, VA, env.DISTRO )
                        }
                    catch (err)
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/canary-deployments
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'

                        cd ${WORKSPACE}/canary-deployments
                        make $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Setup Kubectl') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the kubectl!'

                        cd ${WORKSPACE}/canary-deployments
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Run SERT Test') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Running SERT test!'
                        cd ${WORKSPACE}/canary-deployments

                        make run-functional-tests
                        '''
                        }
                    finally {
                        echo ' SERT Test Completed '
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT} SECONDS"
                        sleep TIMEOUT.toInteger()
                        getArtifactoryAndClean(AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars.template', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            notifyBySlack(currentBuild.result) 
        }
    }
}