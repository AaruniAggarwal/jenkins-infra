@Library('pcloud-jenkins-library') _
//Define global variables
def AUTH_URL
def ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def VA
def PROXY
def GLUSTER
def TIMEOUT_SEC
def TIMEOUT_MIN
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    triggers {
        cron('H H * * *')
    }
        environment {
            //users and credentials. All must be defined in Jenkins Credentials
            GITHUB_USER = credentials('GITHUB_USER')
            TF_VAR_user_name = credentials('GITHUB_USER')
            DOCKER_USER = credentials('DOCKER_USER')
            ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
            TF_VAR_repo_user = credentials('GITHUB_USER')
            TF_VAR_password = credentials('TF_VAR_password')
            OS_USERNAME = credentials('GITHUB_USER')
            OS_PASSWORD = credentials('TF_VAR_password')
            OS_INSECURE = true
            GITHUB_TOKEN = credentials('GITHUB_TOKEN')
            ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')

            //Env constants
            FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
            TERRAFORM_VER = "0.11.13"
            TARGET = "deploy-power-powervc"
            TEST_SUITE = "run-ppc64le-tests"
            OS = "linux"
            OS_IDENTITY_API_VERSION='3'
            OS_TENANT_NAME="ibm-default"
            OS_USER_DOMAIN_NAME="default"

            VIR_CHOSE = "PowerVM"
            HARDWARE_CHOSE="P8"
            DISTRO_CHOSE = "RHEL7.6"
            DEPLOY_REPO = "stash"
            ICP_VERSION = "4.1.0"
            ICP_ADDITIONAL_CONFIG = ""
            SERVER_CONFIG = "Max"
            boolean SYSTEM_TUNING = false
            boolean DEPLOY_VA = true
            boolean DEPLOY_MANAGER = true
            boolean DEPLOY_WORKER = true
            boolean DEPLOY_PROXY = false
            boolean ENABLE_GLUSTER = false
            NUM_OF_WORKERS = "1"
            TIMEOUT = "0"
            TERMPLATE_FILE = ".deploy-power-powervc.tfvars.template"
	 }

    stages {
        //Checkout the canary-deployment git repo
        stage('Clone Canary Deployment') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'canary-deployments'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:ICP-DevOps/canary-deployments.git', credentialsId: 'ibm-github']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'installer'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:IBMPrivateCloud/installer.git', credentialsId: 'ibm-github']]])
            }
        }
        stage('Prepare Config') {
            steps {
                script {
                    echo "Preparing power config file. conf/icp/config.yaml enables all the services and mcm"
                    sh "cat conf/icp/config.yaml >> ${WORKSPACE}/installer/cluster/power.config.yaml"
                    sh "/usr/local/bin/yj-linux -yc < ${WORKSPACE}/installer/cluster/power.config.yaml > config.tf"
                }
            }
        }
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {

                        echo 'Setting-up terraform template file for Max Config PowerVM!'
                        AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                        if ("${ZONE}" == null)
                        {
                            echo "Requested zone could not find"
                            error('Requested zone could not find')
                        }
                        IMAGE=getTheImage(AUTH_URL, env.DISTRO_CHOSE )
                        if ("${IMAGE}" == "")
                        {
                            echo "Requested image could not find in ${AUTH_URL}"
                            error('Requested image could not find')

                        }
                        //16*8 > 128vcpus, 64G
                        MASTER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                        if ("${MASTER}" == null)
                        {
                            echo "Requested template could not find"
                            error('Requested zone could not find')
                        }
                        MANAGER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                        WORKER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                        VA=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                        PROXY=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "PROXY")
                        GLUSTER=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "GLUSTER")
                        // Updating tempate file with env variables
                        updateTemplate(AUTH_URL, ZONE, IMAGE, MASTER, WORKER, MANAGER, VA, PROXY, GLUSTER, env.DISTRO, NUM_OF_WORKERS )
                        }
                    catch (err)
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/canary-deployments
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'

                        cd ${WORKSPACE}/canary-deployments
                        make VERSION=$ICP_VERSION $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Setup Kubectl') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the kubectl!'

                        cd ${WORKSPACE}/canary-deployments
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Run SERT Test') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Running SERT test!'
                        cd ${WORKSPACE}/canary-deployments

                        make run-functional-tests
                        '''
                        }
                    finally {
                        echo ' SERT Test Completed '
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        } 
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        getArtifactoryAndClean(AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars.template', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            notifyBySlack(currentBuild.result) 
        }
    }
}