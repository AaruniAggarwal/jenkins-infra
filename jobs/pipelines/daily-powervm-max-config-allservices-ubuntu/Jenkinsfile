@Library('pcloud-jenkins-library') _
//Define global variables
def AUTH_URL
def ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def GLUSTER
def VA
def PROXY
def TIMEOUT_SEC
def TIMEOUT_MIN
def CONF
def IMAGE_DISTRO
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    triggers {
        cron('H H * * *')
    }
        environment {
            //users and credentials. All must be defined in Jenkins Credentials
            GITHUB_USER = credentials('GITHUB_USER')
            TF_VAR_user_name = credentials('GITHUB_USER')
            DOCKER_USER = credentials('DOCKER_USER')
            ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
            TF_VAR_repo_user = credentials('GITHUB_USER')
            TF_VAR_password = credentials('TF_VAR_password')
            OS_USERNAME = credentials('GITHUB_USER')
            OS_PASSWORD = credentials('TF_VAR_password')
            OS_INSECURE = true
            GITHUB_TOKEN = credentials('GITHUB_TOKEN')
            ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')

            //Env constants
            FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
            TERRAFORM_VER = "0.11.13"
            TARGET = "deploy-power-powervc"
            TEST_SUITE = "ppc64le"
            OS = "linux"
            OS_IDENTITY_API_VERSION='3'
            OS_TENANT_NAME="ibm-default"
            OS_USER_DOMAIN_NAME="default"
            OS_PROJECT_DOMAIN_NAME="Default"
            OS_COMPUTE_API_VERSION=2.37
            OS_NETWORK_API_VERSION=2.0
            OS_IMAGE_API_VERSION=2
            OS_VOLUME_API_VERSION=2
            OS_PRIVATE_NETWORK = "icp_network"
            OS_NETWORK = "icp_network"

            VCPUS_REQ_MASTER = "16"
            MEM_REQ_MASTER = "64"
            PRO_UNIT_REQ_MASTER = ".8"
            VCPUS_REQ_WORKER = "4"
            MEM_REQ_WORKER = "8"
            PRO_UNIT_REQ_WORKER = ".2"

            MASTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
            MANAGER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
            WORKER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
            VA_TEMPLATE = "${env.BUILD_TAG}" + "-" + "master"
            PROXY_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"
            GLUSTER_TEMPLATE = "${env.BUILD_TAG}" + "-" + "worker"

            VIR_CHOSE = "PowerVM"
            HARDWARE_CHOSE="P8"
            DISTRO_CHOSE = "UBUNTU16.04"
            DEPLOY_REPO = "daily"
            ICP_VERSION = "latest"
            ICP_FIXPACK = ""
            ICP_EDITION = "ee"
            ICP_ADDITIONAL_CONFIG = ""
            SERVER_CONFIG = "Max"

            boolean DEPLOY_VA = true
            boolean DEPLOY_MANAGER = true
            boolean DEPLOY_WORKER = true
            boolean DEPLOY_PROXY = false
            boolean ENABLE_GLUSTER = true
            boolean DEPLOY_MASTER = true

            VA = "enabled"
            ISTIO = "enabled"
            MCM = "enabled"
            NPDD = "enabled"
            PSN = "enabled"
            MINIO = "disabled"
            KNATIVE = "disabled"
            GLUSTER_FS = "enabled"

            SYSTEM_TUNING = "disabled"

            NUM_OF_WORKERS = "${DEPLOY_WORKER == true ? 1 : 0}"
            NUM_OF_MASTERS = "${DEPLOY_MASTER == true ? 1 : 0}"
            NUM_OF_MANAGERS = "${DEPLOY_MANAGER == true ? 1 : 0}"
            NUM_OF_PROXIES = "${DEPLOY_PROXY == true ? 1 : 0}"
            NUM_OF_GLUSTERS = "${ENABLE_GLUSTER == true ? 3 : 0}"
            NUM_OF_VA = "${DEPLOY_VA == true ? 1 : 0}"
            
            TIMEOUT = "0"
            TERMPLATE_FILE = ".${TARGET}.tfvars.template"
            TASK = "test-icp-daily-online"
            OFFLINE_IMAGE_LOCATION = ""
	 }

    stages {
        //Checkout the canary-deployment git repo
        stage('Clone Canary Deployment') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/deploy-daily-power-pvc']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'canary-deployments'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:ICP-DevOps/canary-deployments.git', credentialsId: 'ibm-github']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'installer'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:IBMPrivateCloud/installer.git', credentialsId: 'ibm-github']]])
            }
        }
        stage('Prepare Config') {
            steps {
                script {
                    echo "Preparing power config file"
                    sh "cat conf/icp/config.yaml >> ${WORKSPACE}/installer/cluster/power.config.yaml"
                    env.ICP_CONFIG_FILE = "${WORKSPACE}/installer/cluster/power.config.yaml" 
                }
            }
        }
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        MEM_WORKER_GB = MEM_REQ_WORKER.toInteger()
                        MEM_REQ_WORKER_MB = MEM_WORKER_GB * 1024

                        MEM_MASTER_GB = MEM_REQ_MASTER.toInteger()
                        MEM_REQ_MASTER_MB = MEM_MASTER_GB * 1024

                        echo 'Setting-up terraform template file for Max Config PowerVM!'
                        env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                        env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                        if ("${env.AVAILABILITY_ZONE}" == null)
                        {
                            echo "Requested zone could not find"
                            error('Requested zone could not find')
                        }
                        env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE )
                        env.IMAGE_DISTRO = "${env.DISTRO}"
                        if ("${env.OS_IMAGE}" == "")
                        {
                            echo "Requested image could not find in ${env.AUTH_URL}"
                            error('Requested image could not find')

                        }
                        status=createTemplate(env.AUTH_URL, env.VCPUS_REQ_MASTER, "${MEM_REQ_MASTER_MB}", env.PRO_UNIT_REQ_MASTER, env.MASTER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.MASTER_TEMPLATE}"
                        }
                        status=createTemplate(env.AUTH_URL, VCPUS_REQ_WORKER, "${MEM_REQ_WORKER_MB}", PRO_UNIT_REQ_WORKER, WORKER_TEMPLATE)
                        if ( status != 0)
                        {
                            echo "Unable to create template ${env.WORKER_TEMPLATE}"
                        }  
                        // Updating tempate file with env variables
                        sh """
                            cd ${WORKSPACE}/deploy && make ${TASK}
                            cat ${WORKSPACE}/deploy/${TASK}.tfvars.template
                            cp ${WORKSPACE}/deploy/${TASK}.tfvars.template ${WORKSPACE}/canary-deployments/${TERMPLATE_FILE}
                        """
                        sh " cd ${WORKSPACE}/canary-deployments && cat \"${TERMPLATE_FILE}\""
                        }
                    catch (err)
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/canary-deployments
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'

                        cd ${WORKSPACE}/canary-deployments
                        make VERSION=$ICP_VERSION $TARGET
                        sleep 60
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Setup Kubectl') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the kubectl!'

                        cd ${WORKSPACE}/canary-deployments
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Run SERT Test') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Running SERT test!'
                        cd ${WORKSPACE}/canary-deployments

                        make run-functional-tests
                        '''
                        }
                    finally {
                        echo ' SERT Test Completed '
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        } 
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        getArtifactoryAndClean(env.AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars.template', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/power.config.yaml', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            notifyBySlack(currentBuild.result) 
        }
    }
}