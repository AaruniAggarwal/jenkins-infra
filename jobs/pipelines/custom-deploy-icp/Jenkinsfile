@Library('pcloud-jenkins-library') _

//Get Infra and OS from user
properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Build from the Dropdown List', 
            filterLength: 1, 
            filterable: false,
            name: 'Build',
            randomName: 'choice-parameter-66333314439613978',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Online:selected","offline"]'
                ]
            ]
        ], 

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Repo from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Repo',
            randomName: 'choice-parameter-6631314439613978',
            referencedParameters: 'Build',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["daily","edge","stash","stable","release"]'
                ]
            ]
        ], 

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the version from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Version', 
            randomName: 'choice-parameter-7931314456178619', 
            referencedParameters: 'Repo, Build', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                        import hudson.util.Secret
                        import jenkins.model.*
                        import com.cloudbees.plugins.credentials.CredentialsProvider
                        import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials
                        if ( Build.equals("Online") && Repo.equals("edge") || Build.equals("Online") && Repo.equals("stash")){
                                return["3.2.0","3.2.1","4.1.0","latest:selected"]
                            }
                            else if(Build.equals("Online") && Repo.equals("release")){
                                return["3.1.0","3.1.1","3.1.2","3.2.0:selected"]
                            }
                            else if (Build.equals("offline")){
                                instance = Jenkins.getInstance()
                                globalNodeProperties = instance.getGlobalNodeProperties()
                                def user = ""
                                def pass = ""

                                globalNodeProperties.each {
                                    envVars = it.getEnvVars()
                                    if (envVars.get('username') != null) {
                                        user = envVars.get('username');
                                    }
                                    if (envVars.get('password') != null) {
                                        pass = envVars.get('password');
                                    }
                                }
                                def command = """ wget  --output-document  -  https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-$Repo-generic-local/offline/ --http-user ${user} --http-password ${pass}"""
                                build = command.execute().text
                                def min1 = ~/<a href="/
                                def min3 = ~/\\/">.*/
                                def min4 = ~/\\[/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /^<a/) {
                                        String lst = it.findAll(/<a href=".*/)
                                        ls = ls + " " + (lst - min1)
                                        ls = ls - min3
                                        ls = ls - min4
                                    }
                                }
                                bld = ls.split() as List
                                return bld
                            }
                            else 
                            {
                                return["latest"]
                            }

                        '''
                ]
            ]
        ],

        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Tarball from the Dropdown List(NOTE: Ignore for Online deployment)', 
            filterLength: 1, 
            filterable: false, 
            name: 'Package', 
            randomName: 'choice-parameter-79344564456178619', 
            referencedParameters: 'Repo, Version, Build', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                            import jenkins.model.*
                            if ( Build.equals("offline") )
                            {
                                instance = Jenkins.getInstance()
                                globalNodeProperties = instance.getGlobalNodeProperties()
                                def user = ""
                                def pass = ""
                                globalNodeProperties.each {
                                    envVars = it.getEnvVars()
                                    if (envVars.get('username') != null) {
                                        user = envVars.get('username');
                                    }
                                    if (envVars.get('password') != null) {
                                        pass = envVars.get('password');
                                    }
                                }
                                def command = """ wget  --output-document  -  https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-$Repo-generic-local/offline/$Version --http-user ${user} --http-password ${pass}"""
                                build = command.execute().text
                                def min1 = ~/<a href="/
                                def min3 = ~/">.*/
                                def min4 = ~/\\[/
                                def ls =''
                                build.eachLine{
                                    if (it =~ /^<a/) {
                                        String lst = it.findAll(/<a href=".*/)
                                        if (lst.contains("ppc64le"))
                                        {
                                            ls = ls + " " + (lst - min1)
                                            ls = ls - min3
                                            ls = ls - min4
                                        }
                                    }
                                }
                                bld = ls.split() as List
                                return bld
                            }
                            else 
                            {
                                    return["Ignore This for Online"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Operating System from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Virtualization',
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["KVM","PowerVM:selected"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Hardware', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Virtualization.equals("KVM")){
                                return["P9","P8:selected"]
                            }
                            else if(Virtualization.equals("PowerVM")){
                                return["P8:selected","P9"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Operatingsystem', 
            randomName: 'choice-parameter-5631314456178610', 
            referencedParameters: 'Hardware, Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Hardware.equals("P8") && Virtualization.equals("KVM")){
                                return["RHEL7.6","RHEL7.5","UBUNTU18.04","UBUNTU16.04","SLES12SP4","SLES12SP3"]
                            }
                            else if(Hardware.equals("P9") && Virtualization.equals("PowerVM")){
                                return["RHEL7.6-ALT","RHEL7.6","RHEL7.5-ALT","RHEL7.5","SLES12SP4","SLES12SP3","UBUNTU16.04"]
                            }
                            else if(Hardware.equals("P9") && Virtualization.equals("KVM")){
                                return["RHEL7.6-ALT","RHEL7.6","RHEL7.5-ALT","RHEL7.5","SLES12SP4","SLES12SP3","UBUNTU18.04","UBUNTU16.04"]
                            }
                            else if(Hardware.equals("P8") && Virtualization.equals("PowerVM")){
                                return["RHEL7.6","RHEL7.5","SLES12SP4","SLES12SP3","UBUNTU16.04"]
                            }
                        '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the network from the Dropdown List(preferably icp_network1..(icp_network:181(VLAN=2079))icp_network1:64(VLAND:2230))', 
            filterLength: 1, 
            filterable: false, 
            name: 'Network', 
            randomName: 'choice-parameter-563131889956178610', 
            referencedParameters: 'Virtualization', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Virtualization.equals("KVM")){
                                return["icp_network"]
                            }
                            else if(Virtualization.equals("PowerVM")){
                                return["icp_network1", "icp_network", "icp_network2"]
                            }
                        '''
                ]
            ]
        ]
    ])
])
//Define global variables
def AUTH_URL
def AVAILABILITY_ZONE
def IMAGE
def MASTER
def WORKER
def MANAGER
def GLUSTER
def VA
def PROXY
def TIMEOUT_SEC
def TIMEOUT_MIN
def CONF
def ICP_CONFIG_FILE
def MASTER_TEMPLATE
def IMAGE_DISTRO
env.DISTRO = ""

pipeline {
    agent {
        dockerfile {
            dir 'images/terraform'
            additionalBuildArgs '--force-rm	--no-cache'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'daily-x86_64'
        }
    }
    parameters {
        choice(name: 'ServerConfig', choices: 'Max\nMin', description: 'Choose The machine configuration(Max: 16cpu, 64G ; Min:2cpu, 16G)')
        booleanParam(defaultValue: true, name: 'DeployMaster', description: 'Select if you want to Deploy Master node')
        string(defaultValue: '1', description: 'Enter Number of Masters needed', name: 'NumOfMasters')
        booleanParam(defaultValue: false, name: 'DeployVA', description: 'Select if you want to Deploy VA node')
        booleanParam(defaultValue: false, name: 'DeployManager', description: 'Select if you want to Deploy Management node')
        string(defaultValue: '1', description: 'Enter Number of Management Nodes needed', name: 'NumOfManagers')
        booleanParam(defaultValue: false, name: 'DeployProxy', description: 'Select if you want to Deploy Proxy node')
        string(defaultValue: '1', description: 'Enter Number of Proxy Nodes needed', name: 'NumOfProxies')
        booleanParam(defaultValue: false, name: 'DeployWorker', description: 'Select if you want to Deploy Worker node')
        string(defaultValue: '1', description: 'Enter Number of workers needed', name: 'NumOfWorkers')
        booleanParam(defaultValue: false, name: 'EnableGluster', description: 'Select if you want to enable Gluster Persistant storage')
        string(defaultValue: '3', description: 'Enter Number of workers needed', name: 'NumOfGlusters')
        booleanParam(defaultValue: false, name: 'EnableIstio', description: 'Select if you want to enable istio(Provide the required configuration in ICPConfig)')
        booleanParam(defaultValue: false, name: 'EnableMCM', description: 'Select if you want to enable multicluster-endpoint(Provide the required configuration in ICPConfig)')
        booleanParam(defaultValue: false, name: 'EnableNodeProblemDetector', description: 'Select if you want to enable node-problem-detector-draino')
        booleanParam(defaultValue: false, name: 'EnablePlatformSecurity', description: 'Select if you want to enable platform-security-netpols')
        booleanParam(defaultValue: false, name: 'EnableStorageMinio', description: 'Select if you want to enable storage-minio(Provide the required configuration in ICPConfig)')
        booleanParam(defaultValue: false, name: 'EnableKnative', description: 'Select if you want to enable knative(Provide the required configuration in ICPConfig)')
        //booleanParam(defaultValue: false, name: 'EnableKmsPlugin', description: 'Select if you want to enable kmsplugin')
        booleanParam(defaultValue: false, name: 'SystemTuning', description: 'Select if you want to have system tuning for performance')
        text(name: 'ICPConfig', defaultValue: '', description: 'Paste the additional ICP config in yaml format')
        string(defaultValue: '0', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        TF_VAR_user_name = credentials('GITHUB_USER')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        TF_VAR_repo_user = credentials('GITHUB_USER')
        TF_VAR_password = credentials('TF_VAR_password')
        OS_USERNAME = credentials('GITHUB_USER')
        OS_PASSWORD = credentials('TF_VAR_password')
        OS_INSECURE = true
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        TF_VAR_offline_remote_password = credentials('ARTIFACTORY_TOKEN')

        //Env constants
        FUNCTIONAL_TEST_REPO = "icp-sanity-bats"
        TERRAFORM_VER = "0.11.13"
        TARGET = "deploy-power-powervc"
        TEST_SUITE = "ppc64le-edge"
        OS = "linux"
        OS_IDENTITY_API_VERSION='3'
        OS_TENANT_NAME="ibm-default"
        OS_USER_DOMAIN_NAME="default"
        OS_PROJECT_DOMAIN_NAME="Default"
        OS_COMPUTE_API_VERSION=2.37
        OS_NETWORK_API_VERSION=2.0
        OS_IMAGE_API_VERSION=2
        OS_VOLUME_API_VERSION=2
        
        VIR_CHOSE = "${params.Virtualization}"
        HARDWARE_CHOSE = "${params.Hardware}"
        DISTRO_CHOSE = "${params.Operatingsystem}"
        DEPLOY_REPO = "${params.Repo}"
        ICP_VERSION = "${params.Version}"
        OFFLINE_TARBALL = "${params.Package}"
        BUILD_TYPE = "${params.Build}"
        ICP_ADDITIONAL_CONFIG = "'${params.ICPConfig}'"
        SERVER_CONFIG = "${params.ServerConfig}"

        VA = "${params.DeployVA == true ? "enabled"  : "disabled"}"
        ISTIO = "${params.EnableIstio == true ? "enabled"  : "disabled"}"
        MCM = "${params.EnableMCM == true ? "enabled"  : "disabled"}"
        NPDD = "${params.EnableNodeProblemDetector == true ? "enabled"  : "disabled"}"
        PSN = "${params.EnablePlatformSecurity == true ? "enabled"  : "disabled"}"
        MINIO = "${params.EnableStorageMinio == true ? "enabled"  : "disabled"}"
        KNATIVE = "${params.EnableKnative == true ? "enabled"  : "disabled"}"
        GLUSTER_FS = "${params.EnableGluster == true ? "enabled"  : "disabled"}"
        SYSTEM_TUNING = "${params.SystemTuning == true ? "enabled"  : "disabled"}"

        boolean CREATE_STORAGE = "${params.EnableGluster == true ? "true"  : "false"}"

        //boolean ENABLE_KMS = "${params.EnableKmsPlugin}"
        NUM_OF_WORKERS = "${params.DeployWorker == true ? params.NumOfWorkers : 0}"
        NUM_OF_MASTERS = "${params.DeployMaster == true ? params.NumOfMasters : 0}"
        NUM_OF_MANAGERS = "${params.DeployManager == true ? params.NumOfManagers : 0}"
        NUM_OF_PROXIES = "${params.DeployProxy == true ? params.NumOfProxies : 0}"
        NUM_OF_GLUSTERS = "${params.EnableGluster == true ? params.NumOfGlusters : 0}"

        TASK = "${params.Build == 'Online' ? "test-icp-daily-online" : "test-icp-daily-offline"}"
        
        TIMEOUT = "${params.KeepFor}"
        OS_NETWORK = "${params.Network}"
        OS_PRIVATE_NETWORK = "${params.Network}"
        TERMPLATE_FILE = ".${TARGET}.tfvars.template"
        OFFLINE_IMAGE_LOCATION = "https://na.artifactory.swg-devops.com/artifactory/hyc-cloud-private-${DEPLOY_REPO}-generic-local/${BUILD_TYPE}/${ICP_VERSION}/${OFFLINE_TARBALL}"
	 }

    stages {
        //Checkout the canary-deployment git repo
        stage('Clone Canary Deployment') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/deploy-daily-power-pvc']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'canary-deployments'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:ICP-DevOps/canary-deployments.git', credentialsId: 'ibm-github']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 60], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'installer'], [$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[ url: 'git@github.ibm.com:IBMPrivateCloud/installer.git', credentialsId: 'ibm-github']]])
            }
        }
        stage('Prepare Config') {
            steps {
                script {
                    if ( env.SERVER_CONFIG == "Max" )
                    {
                        echo "Preparing power config file"
                        sh "echo '${params.ICPConfig}' >> ${WORKSPACE}/installer/cluster/power.config.yaml"
                        env.ICP_CONFIG_FILE = "${WORKSPACE}/installer/cluster/power.config.yaml"
                        //sh "/usr/local/bin/yj-linux -yc < ${WORKSPACE}/installer/cluster/power.config.yaml > config.tf"
                    }
                    else if ( env.SERVER_CONFIG == "Mid" )
                    {
                        echo "Preparing power config file"
                        sh "echo '${params.ICPConfig}' >> ${WORKSPACE}/installer/cluster/power.config.yaml"
                        env.ICP_CONFIG_FILE = "${WORKSPACE}/installer/cluster/power.config.yaml"
                        //sh "/usr/local/bin/yj-linux -yc < ${WORKSPACE}/installer/cluster/power.config.yaml > config.tf"
                    }
                    else if ( env.SERVER_CONFIG == "Min" )
                    {
                        // Minimum config uses the default (x86's) config file
                        echo "Preparing power config file"
                        sh "echo '${params.ICPConfig}' >> ${WORKSPACE}/installer/cluster/config.yaml"
                        env.ICP_CONFIG_FILE = "${WORKSPACE}/installer/cluster/config.yaml"
                        //sh "/usr/local/bin/yj-linux -yc < ${WORKSPACE}/installer/cluster/config.yaml > config.tf"
                    }
                }
            }
        }
        stage('Prepare Teraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err

                        }
                        if ( env.VIR_CHOSE == "KVM" )
                        {   
                            echo 'Setting-up terraform template file for KVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/kvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                            env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                            if ("${AVAILABILITY_ZONE}" == null)
                            {
                                echo "Requested zone could not find in ${env.AUTH_URL}"
                                error('Requested zone could not find')
                            }
                            env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE )
                            env.IMAGE_DISTRO = "${env.DISTRO}"
                            if ("${IMAGE}" == "")
                            {
                                echo "Requested image could not find in ${env.AUTH_URL}"
                                error('Requested image could not find')

                            }
                            if ( env.SERVER_CONFIG == "Min" )
                            {
                                //2*8 > 16vcpus, 16G
                                env.MASTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                                if ("${MASTER}" == null)
                                {
                                    echo "Requested template could not find"
                                    error('Requested zone could not find')
                                }
                                env.MANAGER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                                env.WORKER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                                env.VA_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                                env.PROXY_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "PROXY")
                                env.GLUSTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "GLUSTER")
                            } 
                            else  if ( env.SERVER_CONFIG == "Max" )
                            {
                                //16*8 > 128vcpus, 64G
                                env.MASTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                                if ("${MASTER}" == null)
                                {
                                    echo "Requested template could not find"
                                    error('Requested zone could not find')
                                }
                                env.MANAGER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                                env.WORKER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                                env.VA_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                                env.PROXY_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "PROXY")
                                env.GLUSTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "GLUSTER")
                            }
                        } 
                        else if ( env.VIR_CHOSE == "PowerVM" )
                        {
                            echo 'Setting-up terraform template file for PowerVM!'
                            env.AUTH_URL=sh(returnStdout: true, script: "grep AUTH_URL conf/infra/pvm.conf|awk 'BEGIN{FS=\"AUTH_URL=\"}{print \$2}'|tr '\n' ' '").trim()
                            env.AVAILABILITY_ZONE=getZone(env.VIR_CHOSE, HARDWARE_CHOSE )
                            if ("${AVAILABILITY_ZONE}" == null)
                            {
                                echo "Requested zone could not find in ${AUTH_URL}"
                                error('Could not find requesed zone')
                            }
                            env.OS_IMAGE=getTheImage(env.AUTH_URL, env.DISTRO_CHOSE )
                            env.IMAGE_DISTRO = "${env.DISTRO}"
                            if ("${IMAGE}" == "")
                            {
                                echo "Requested image could not find in ${AUTH_URL}"
                                error('Could not find requesed image')

                            }
                            if ( env.SERVER_CONFIG == "Min" )
                            {
                                //2*8 > 16vcpus, 16G
                                env.MASTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                                if ("${MASTER}" == null)
                                {
                                    echo "Requested template could not find"
                                    error('Requested zone could not find')
                                }
                                env.MANAGER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                                env.WORKER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                                env.VA_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                                env.PROXY_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "PROXY")
                                env.GLUSTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "GLUSTER")
                            }
                            else if ( env.SERVER_CONFIG == "Max" )
                            {
                                //2*8 > 128vcpus, 64G
                                env.MASTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MASTER")
                                if ("${MASTER}" == null)
                                {
                                    echo "Requested template could not find"
                                    error('Requested zone could not find')
                                }
                                env.MANAGER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "MANAGER")
                                env.WORKER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "WORKER")
                                env.VA_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "VA")
                                env.PROXY_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "PROXY")
                                env.GLUSTER_TEMPLATE=getTemplate(env.VIR_CHOSE, env.SERVER_CONFIG, "GLUSTER")
                            }
                        }
                        // Updating tempate file with env variables 
                        sh """
                            cd ${WORKSPACE}/deploy && make ${TASK}
                            cat ${WORKSPACE}/deploy/${TASK}.tfvars.template
                            cp ${WORKSPACE}/deploy/${TASK}.tfvars.template ${WORKSPACE}/canary-deployments/${TERMPLATE_FILE}
                        """
                        sh " cd ${WORKSPACE}/canary-deployments && cat \"${TERMPLATE_FILE}\""
                    }
                    catch (err) 
                    {
                        echo 'Error ! Template prepration failed !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Initilize Environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Initializing supporting repos and keys !'

                        cd ${WORKSPACE}/canary-deployments
                        make init
                        make keys
                        make setup-dependencies
                        '''
                        }
                    catch (err) {
                        echo 'Error ! ENV setup failed!'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Deploy ICP Cluster') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Deploying Cluster!'
                        export TF_VAR_offline_remote_password=$TF_VAR_password
                        cd ${WORKSPACE}/canary-deployments
                        make VERSION=$ICP_VERSION $TARGET
                        sleep 600
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Setup Kubectl') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Setting up the kubectl!'

                        cd ${WORKSPACE}/canary-deployments
                        make $TARGET:config
                        '''
                        }
                    catch (err) {
                        echo 'Error ! Tearing off the cluster !'
                        getArtifactoryAndClean(env.AUTH_URL)
                        throw err
                    }
                }
            }
        }
        stage('Run SERT Test') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                        echo 'Running SERT test!'
                        cd ${WORKSPACE}/canary-deployments

                        make run-functional-tests
                        echo ' SERT Test Completed '
                        '''
                        }
                    catch (err) {
                        echo 'SERT Test failed !'
                    }
                }
            }
        }
        stage('Wait for timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 )
                        {
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                        } 
                        echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                        sleep TIMEOUT_SEC
                        }
                    finally {
                        getArtifactoryAndClean(env.AUTH_URL)
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/systeminfo.txt.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster.tar.gz', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/cluster/config.yaml', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars.template', fingerprint: true, onlyIfSuccessful: false
            archiveArtifacts allowEmptyArchive: true, artifacts: 'canary-deployments/deploy-power-powervc.tfvars', fingerprint: true, onlyIfSuccessful: false
            cleanWs()
            //notifyBySlack(currentBuild.result)
        }
    }
}